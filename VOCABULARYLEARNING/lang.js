const savedWords = JSON.parse(localStorage.getItem('words'));

// N·∫øu c√≥ d·ªØ li·ªáu t·ª´ v·ª±ng, s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√≥, n·∫øu kh√¥ng, d√πng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
const words = savedWords || [
    { word: "Web development", definition: "Ph√°t tri·ªÉn web", starred: false },
    { word: "Artificial Intelligence", definition: "Tr√≠ tu·ªá nh√¢n t·∫°o", starred: false },
    { word: "Data Science", definition: "Khoa h·ªçc d·ªØ li·ªáu", starred: false },
    { word: "Machine Learning", definition: "H·ªçc m√°y", starred: false }
];

// Kh·ªüi t·∫°o tr·∫°ng th√°i ƒë√°nh d·∫•u sao t·ª´ localStorage n·∫øu c√≥
words.forEach(word => {
    if (word.starred === undefined) {
        word.starred = false;
    }
});

let currentIndex = 0;
let enterHandledInInput = false;
let filteredWords = words; // Danh s√°ch t·ª´ hi·ªÉn th·ªã sau khi l·ªçc
let editingWordOriginalIndex = -1; // L∆∞u ch·ªâ s·ªë c·ªßa t·ª´ ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a trong m·∫£ng 'words' g·ªëc

// L·∫•y c√°c ph·∫ßn t·ª≠ DOM (ƒê√£ c·∫≠p nh·∫≠t v√† th√™m c√°c ID m·ªõi)
const cardContainer = document.getElementById('card-container');
const prevButton = document.getElementById('prev');
const nextButton = document.getElementById('next');
const shuffleButton = document.getElementById('shuffle'); // Th√™m n√∫t shuffle
const addEditWordBtn = document.getElementById('add-edit-word-btn'); // N√∫t Add/Save
const editCurrentWordBtn = document.getElementById('edit-current-word-btn'); // N√∫t Edit
const newWordInput = document.getElementById('new-word');
const newDefinitionInput = document.getElementById('new-definition');
const deleteWordBtn = document.getElementById('delete-word-btn');
const searchInput = document.getElementById('search-input');
const searchBtn = document.getElementById('search-btn');
const starToggle = document.getElementById('star-toggle'); // toggle T·ª´ ƒë√£ g·∫Øn sao
const starToggleStatus = document.getElementById('star-toggle-status');
const themeToggle = document.getElementById('theme-toggle');
const themeToggleStatus = document.getElementById('theme-toggle-status');
const learnToggle = document.getElementById('learn-toggle'); // toggle Ch·∫ø ƒë·ªô √¥n t·∫≠p
const learnToggleStatus = document.getElementById('learn-toggle-status');
const uploadFile = document.getElementById('upload-file');
const uploadBtn = document.getElementById('upload-btn');
const starButton = document.getElementById('star-button'); // N√∫t ng√¥i sao tr√™n th·∫ª
const wordIndexDisplay = document.getElementById('word-index'); // Th√™m ph·∫ßn t·ª≠ hi·ªÉn th·ªã ch·ªâ s·ªë t·ª´
const toastNotification = document.getElementById('toast-notification'); // Th√™m toast notification

// Modal Elements
const deleteConfirmModal = document.getElementById('deleteConfirmModal');
const closeDeleteModalBtn = document.getElementById('closeDeleteModalBtn');
const wordToDeleteSpan = document.getElementById('wordToDelete');
const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');


// --- H√†m hi·ªÉn th·ªã th√¥ng b√°o (Toast Notification) ---
function showToast(message, type = 'info', duration = 3000) {
    toastNotification.textContent = message;
    toastNotification.className = `toast-notification show ${type}`; // Th√™m type

    setTimeout(() => {
        toastNotification.classList.remove('show');
    }, duration);
}

// --- H√†m c·∫≠p nh·∫≠t th·∫ª t·ª´ v·ª±ng ---
function updateCard(index) {
    if (filteredWords.length === 0) {
        cardContainer.innerHTML = `
            <div class="card">
                <div class="card-inner">
                    <div class="card-front">Kh√¥ng c√≥ t·ª´ n√†o ƒë·ªÉ hi·ªÉn th·ªã</div>
                    <div class="card-back"></div>
                </div>
            </div>
        `;
        wordIndexDisplay.textContent = "0/0";
        prevButton.disabled = true;
        nextButton.disabled = true;
        shuffleButton.disabled = true; // V√¥ hi·ªáu h√≥a shuffle khi kh√¥ng c√≥ t·ª´
        starButton.style.display = 'none'; // ·∫®n n√∫t sao
        editCurrentWordBtn.disabled = true; // V√¥ hi·ªáu h√≥a n√∫t Edit
        deleteWordBtn.disabled = true; // V√¥ hi·ªáu h√≥a n√∫t Delete
        return;
    }

    // ƒê·∫£m b·∫£o index n·∫±m trong gi·ªõi h·∫°n
    if (index >= filteredWords.length) {
        index = 0;
        currentIndex = 0;
    }
    if (index < 0) {
        index = filteredWords.length - 1;
        currentIndex = filteredWords.length - 1;
    }

    const currentWord = filteredWords[index];

    // T·∫°o HTML cho th·∫ª t·ª´ v·ª±ng
    cardContainer.innerHTML = `
        <div class="card" id="current-card">
            <div class="card-inner" id="card-inner">
                <div class="card-front">
                    <div class="card-front-content">
                        ${currentWord.word} 
                        <span class="speaker-icon" id="speakWordBtn" data-text="${currentWord.word}">üîä</span>
                    </div>
                </div>
                <div class="card-back">${currentWord.definition}</div>
            </div>
        </div>
    `;

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t ng√¥i sao
    if (currentWord.starred) {
        starButton.classList.add('starred');
    } else {
        starButton.classList.remove('starred');
    }
    starButton.style.display = 'block'; // Hi·ªÉn th·ªã n√∫t sao khi c√≥ t·ª´

    // C·∫≠p nh·∫≠t ch·ªâ s·ªë t·ª´
    wordIndexDisplay.textContent = `${currentIndex + 1}/${filteredWords.length}`;

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t ƒëi·ªÅu h∆∞·ªõng v√† ch·ª©c nƒÉng
    prevButton.disabled = (filteredWords.length <= 1);
    nextButton.disabled = (filteredWords.length <= 1);
    shuffleButton.disabled = (filteredWords.length <= 1);
    editCurrentWordBtn.disabled = false; // B·∫≠t l·∫°i n√∫t Edit
    deleteWordBtn.disabled = false; // B·∫≠t l·∫°i n√∫t Delete


    // X·ª≠ l√Ω s·ª± ki·ªán l·∫≠t th·∫ª
    document.getElementById('current-card').addEventListener('click', () => {
        document.getElementById('current-card').classList.toggle('flipped');
    });

    // --- LOGIC PH√ÅT √ÇM ---
    const speakWordBtn = document.getElementById('speakWordBtn');
    if (speakWordBtn) {
        speakWordBtn.addEventListener('click', (event) => {
            event.stopPropagation(); // NgƒÉn s·ª± ki·ªán click n√†y lan ra th·∫ª v√† l√†m l·∫≠t th·∫ª
            const textToSpeak = event.target.dataset.text;
            speakText(textToSpeak, 'en-US'); // G·ªçi h√†m ph√°t √¢m
        });
    }
}

// --- H√†m ph√°t √¢m vƒÉn b·∫£n ---
function speakText(text, lang = 'en-US', rate = 1.0, pitch = 1.0) {
    if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = lang; // Ng√¥n ng·ªØ (v√≠ d·ª•: 'en-US' cho ti·∫øng Anh, 'vi-VN' cho ti·∫øng Vi·ªát)
        utterance.rate = rate; // T·ªëc ƒë·ªô n√≥i (0.1 - 10, m·∫∑c ƒë·ªãnh 1)
        utterance.pitch = pitch; // Cao ƒë·ªô (0 - 2, m·∫∑c ƒë·ªãnh 1)

        // T√πy ch·ªçn: Ch·ªçn gi·ªçng ƒë·ªçc c·ª• th·ªÉ (n·∫øu b·∫°n mu·ªën)
        // const voices = window.speechSynthesis.getVoices();
        // utterance.voice = voices.find(voice => voice.name === 'Google US English'); // V√≠ d·ª• ch·ªçn gi·ªçng

        window.speechSynthesis.speak(utterance);
    } else {
        showToast('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ t√≠nh nƒÉng ph√°t √¢m.', 'error', 3000);
        console.warn('SpeechSynthesis API not supported in this browser.');
    }
}

// --- H√†m l·ªçc t·ª´ v·ª±ng ---
function filterWords() {
    const isStarFilterOn = starToggle.dataset.state === "1";
    const isLearnFilterOn = learnToggle.dataset.state === "1";

    if (isStarFilterOn) {
        filteredWords = words.filter(word => word.starred);
    } else if (isLearnFilterOn) {
        // Logic cho ch·∫ø ƒë·ªô √¥n t·∫≠p: v√≠ d·ª• l·ªçc t·ª´ c√≥ nghƒ©a ng·∫Øn h∆°n 10 k√Ω t·ª± (c√≥ th·ªÉ thay ƒë·ªïi)
        // ƒê√¢y l√† m·ªôt v√≠ d·ª• ƒë∆°n gi·∫£n, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi logic n√†y d·ª±a tr√™n ƒë·ªãnh nghƒ©a "√¥n t·∫≠p" c·ªßa b·∫°n
        filteredWords = words.filter(word => word.definition.length < 10);
        showToast("Ch·∫ø ƒë·ªô √¥n t·∫≠p ƒëang b·∫≠t (hi·ªÉn th·ªã t·ª´ c√≥ nghƒ©a ng·∫Øn).", "info", 2000);
    } else {
        filteredWords = words; // Kh√¥ng l·ªçc
    }

    if (filteredWords.length === 0 && (isStarFilterOn || isLearnFilterOn)) {
        showToast("Kh√¥ng c√≥ t·ª´ n√†o ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán l·ªçc.", "info", 3000);
    }
}

// --- H√†m ƒë·ªÉ reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a v·ªÅ ch·∫ø ƒë·ªô th√™m m·ªõi ---
function resetEditMode() {
    addEditWordBtn.textContent = 'Add';
    addEditWordBtn.dataset.mode = 'add';
    newWordInput.value = '';
    newDefinitionInput.value = '';
    editingWordOriginalIndex = -1;
    newWordInput.focus(); // Focus l·∫°i v√†o √¥ nh·∫≠p t·ª´ m·ªõi
}

// --- Event Listeners ---

// N√∫t Previous
prevButton.addEventListener('click', () => {
    currentIndex = (currentIndex - 1 + filteredWords.length) % filteredWords.length;
    updateCard(currentIndex);
    resetEditMode(); // Reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a khi chuy·ªÉn th·∫ª
});

// N√∫t Next
nextButton.addEventListener('click', () => {
    currentIndex = (currentIndex + 1) % filteredWords.length;
    updateCard(currentIndex);
    resetEditMode(); // Reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a khi chuy·ªÉn th·∫ª
});

// N√∫t Shuffle
shuffleButton.addEventListener('click', () => {
    if (filteredWords.length > 0) {
        // Tr·ªôn ng·∫´u nhi√™n filteredWords
        for (let i = filteredWords.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [filteredWords[i], filteredWords[j]] = [filteredWords[j], filteredWords[i]];
        }
        currentIndex = 0; // Hi·ªÉn th·ªã t·ª´ ƒë·∫ßu ti√™n sau khi tr·ªôn
        updateCard(currentIndex);
        resetEditMode(); // Reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a khi tr·ªôn
        showToast('ƒê√£ tr·ªôn ng·∫´u nhi√™n danh s√°ch t·ª´!', 'info');
    }
});

// X·ª≠ l√Ω n√∫t Add/Save Changes
addEditWordBtn.addEventListener('click', () => {
    const word = newWordInput.value.trim();
    const definition = newDefinitionInput.value.trim();

    if (!word || !definition) {
        showToast('Vui l√≤ng nh·∫≠p c·∫£ t·ª´ v√† nghƒ©a!', 'error');
        return;
    }

    if (addEditWordBtn.dataset.mode === 'add') {
        // --- CH·∫æ ƒê·ªò TH√äM M·ªöI ---
        const isDuplicate = words.some(w => w.word.toLowerCase() === word.toLowerCase());
        if (isDuplicate) {
            showToast('T·ª´ n√†y ƒë√£ t·ªìn t·∫°i trong danh s√°ch!', 'error');
            return;
        }

        words.push({ word, definition, starred: false });
        localStorage.setItem('words', JSON.stringify(words));
        showToast('ƒê√£ th√™m t·ª´ m·ªõi th√†nh c√¥ng!', 'success');
        resetEditMode(); // Reset input v√† mode
        filterWords(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi th√™m
        currentIndex = filteredWords.length - 1; // Chuy·ªÉn ƒë·∫øn t·ª´ v·ª´a th√™m
        updateCard(currentIndex);

    } else if (addEditWordBtn.dataset.mode === 'edit') {
        // --- CH·∫æ ƒê·ªò CH·ªàNH S·ª¨A ---
        if (editingWordOriginalIndex === -1) {
            showToast('Kh√¥ng c√≥ t·ª´ n√†o ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a!', 'error');
            return;
        }

        const originalWordObject = words[editingWordOriginalIndex];

        // Ki·ªÉm tra xem c√≥ t·ª´ n√†o kh√°c trong danh s√°ch (tr·ª´ t·ª´ ƒëang s·ª≠a) c√≥ c√πng t·ª´ m·ªõi kh√¥ng
        const isDuplicate = words.some((w, idx) =>
            idx !== editingWordOriginalIndex && w.word.toLowerCase() === word.toLowerCase()
        );

        if (isDuplicate) {
            showToast('T·ª´ m·ªõi n√†y ƒë√£ t·ªìn t·∫°i ·ªü m·ªôt t·ª´ kh√°c!', 'error');
            return;
        }

        // C·∫≠p nh·∫≠t t·ª´ trong m·∫£ng g·ªëc
        originalWordObject.word = word;
        originalWordObject.definition = definition;
        localStorage.setItem('words', JSON.stringify(words));
        showToast('ƒê√£ c·∫≠p nh·∫≠t t·ª´ th√†nh c√¥ng!', 'success');

        resetEditMode(); // Reset v·ªÅ ch·∫ø ƒë·ªô "Add"
        filterWords(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi s·ª≠a
        // T√¨m l·∫°i index c·ªßa t·ª´ v·ª´a s·ª≠a trong filteredWords ƒë·ªÉ hi·ªÉn th·ªã
        currentIndex = filteredWords.findIndex(w => w.word === word && w.definition === definition);
        if (currentIndex === -1 && filteredWords.length > 0) { // N·∫øu kh√¥ng t√¨m th·∫•y (do b·ªô l·ªçc)
            currentIndex = 0; // Chuy·ªÉn v·ªÅ t·ª´ ƒë·∫ßu ti√™n
        } else if (filteredWords.length === 0) {
             currentIndex = 0;
        }
        updateCard(currentIndex);
    }
});

// N√∫t Edit - B·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a t·ª´ hi·ªán t·∫°i
editCurrentWordBtn.addEventListener('click', () => {
    if (filteredWords.length === 0) {
        showToast('Kh√¥ng c√≥ t·ª´ n√†o ƒë·ªÉ ch·ªânh s·ª≠a!', 'info');
        return;
    }

    const currentWord = filteredWords[currentIndex];
    newWordInput.value = currentWord.word;
    newDefinitionInput.value = currentWord.definition;

    // T√¨m ch·ªâ s·ªë c·ªßa t·ª´ hi·ªán t·∫°i trong m·∫£ng `words` g·ªëc
    editingWordOriginalIndex = words.findIndex(w => w.word === currentWord.word && w.definition === currentWord.definition);

    if (editingWordOriginalIndex === -1) {
        showToast('Kh√¥ng th·ªÉ t√¨m th·∫•y t·ª´ ƒë·ªÉ ch·ªânh s·ª≠a. Vui l√≤ng th·ª≠ l·∫°i.', 'error');
        resetEditMode(); // Reset input v√† mode
        return;
    }

    // Chuy·ªÉn n√∫t Add th√†nh Save Changes
    addEditWordBtn.textContent = 'Save Changes';
    addEditWordBtn.dataset.mode = 'edit';
    newWordInput.focus(); // T·∫≠p trung v√†o √¥ nh·∫≠p t·ª´ ƒë·ªÉ b·∫Øt ƒë·∫ßu ch·ªânh s·ª≠a
    showToast(`ƒêang ch·ªânh s·ª≠a t·ª´ "${currentWord.word}". Nh·∫•n "Save Changes" ƒë·ªÉ l∆∞u.`, 'info', 4000);
});


// X√≥a t·ª´ (s·ª≠ d·ª•ng Modal t√πy ch·ªânh)
deleteWordBtn.addEventListener('click', () => {
    if (filteredWords.length === 0) {
        showToast('Kh√¥ng c√≥ t·ª´ n√†o ƒë·ªÉ x√≥a!', 'info');
        return;
    }

    const currentWordText = filteredWords[currentIndex].word;
    wordToDeleteSpan.textContent = currentWordText; // Hi·ªÉn th·ªã t·ª´ s·∫Ω b·ªã x√≥a
    deleteConfirmModal.classList.add('show'); // Hi·ªÉn th·ªã modal

    // X·ª≠ l√Ω khi nh·∫•n n√∫t "X√≥a" trong modal
    confirmDeleteBtn.onclick = () => {
        const wordToDelete = filteredWords[currentIndex].word; // ƒê·∫£m b·∫£o l·∫•y ƒë√∫ng t·ª´
        // X√≥a t·ª´ kh·ªèi m·∫£ng 'words' g·ªëc
        const originalIndex = words.findIndex(w => w.word === wordToDelete);
        if (originalIndex > -1) {
            words.splice(originalIndex, 1);
            localStorage.setItem('words', JSON.stringify(words));
            showToast(`ƒê√£ x√≥a t·ª´ "${wordToDelete}" th√†nh c√¥ng!`, 'success');
            resetEditMode(); // Reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a sau khi x√≥a
        }

        filterWords(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi x√≥a

        // ƒêi·ªÅu ch·ªânh currentIndex sau khi x√≥a
        if (filteredWords.length > 0) {
            currentIndex = Math.min(currentIndex, filteredWords.length - 1);
        } else {
            currentIndex = 0;
        }
        
        updateCard(currentIndex);
        deleteConfirmModal.classList.remove('show'); // ·∫®n modal sau khi x√≥a
    };

    // X·ª≠ l√Ω khi nh·∫•n n√∫t "H·ªßy" ho·∫∑c ƒë√≥ng modal
    cancelDeleteBtn.onclick = () => {
        deleteConfirmModal.classList.remove('show');
    };

    closeDeleteModalBtn.onclick = () => {
        deleteConfirmModal.classList.remove('show');
    };

    // ƒê√≥ng modal khi click ra ngo√†i (l·ªõp n·ªÅn)
    window.onclick = (event) => {
        if (event.target === deleteConfirmModal) {
            deleteConfirmModal.classList.remove('show');
        }
    };
});

// T√¨m ki·∫øm t·ª´
searchBtn.addEventListener('click', () => {
    const searchTerm = searchInput.value.trim().toLowerCase();
    if (searchTerm === '') {
        showToast('Vui l√≤ng nh·∫≠p t·ª´ c·∫ßn t√¨m!', 'error');
        filterWords(); // Reset v·ªÅ danh s√°ch ban ƒë·∫ßu n·∫øu √¥ t√¨m ki·∫øm tr·ªëng
        currentIndex = 0;
        updateCard(currentIndex);
        return;
    }

    const foundIndex = filteredWords.findIndex(word =>
        word.word.toLowerCase().includes(searchTerm) ||
        word.definition.toLowerCase().includes(searchTerm)
    );

    if (foundIndex !== -1) {
        currentIndex = foundIndex;
        updateCard(currentIndex);
        showToast(`ƒê√£ t√¨m th·∫•y t·ª´ "${filteredWords[currentIndex].word}"!`, 'success');
    } else {
        showToast('Kh√¥ng t√¨m th·∫•y t·ª´ n√†o ph√π h·ª£p.', 'info');
    }
    resetEditMode(); // Reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a khi t√¨m ki·∫øm
});

// X·ª≠ l√Ω Enter trong input
newWordInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
        e.preventDefault();
        newDefinitionInput.focus();
    }
});

newDefinitionInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
        e.preventDefault();
        addEditWordBtn.click(); // K√≠ch ho·∫°t n√∫t Add/Save
    }
});

searchInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
        e.preventDefault();
        searchBtn.click(); // K√≠ch ho·∫°t n√∫t Search
    }
});

// Toggle Ng√¥i sao cho t·ª´ hi·ªán t·∫°i
starButton.addEventListener('click', () => {
    if (filteredWords.length > 0) {
        const currentWord = filteredWords[currentIndex];
        currentWord.starred = !currentWord.starred;
        // C·∫≠p nh·∫≠t t·ª´ trong m·∫£ng 'words' g·ªëc c≈©ng, kh√¥ng ch·ªâ filteredWords
        const originalIndex = words.findIndex(w => w.word === currentWord.word && w.definition === currentWord.definition);
        if (originalIndex > -1) {
             words[originalIndex].starred = currentWord.starred;
        }
        localStorage.setItem('words', JSON.stringify(words)); // C·∫≠p nh·∫≠t to√†n b·ªô danh s√°ch t·ª´
        updateCard(currentIndex); // C·∫≠p nh·∫≠t l·∫°i th·∫ª ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i sao
        showToast(`T·ª´ "${currentWord.word}" ƒë√£ ${currentWord.starred ? 'ƒë∆∞·ª£c g·∫Øn sao' : 'b·ªè g·∫Øn sao'}.`, 'info');
    }
});

// Toggle l·ªçc t·ª´ ƒë√£ g·∫Øn sao (star-toggle)
starToggle.addEventListener('click', () => {
    // T·∫Øt c√°c toggle l·ªçc kh√°c ƒë·ªÉ tr√°nh xung ƒë·ªôt
    learnToggle.dataset.state = "0";
    learnToggleStatus.textContent = "Off";

    const currentState = parseInt(starToggle.dataset.state);
    starToggle.dataset.state = (currentState === 0 ? "1" : "0").toString();
    starToggleStatus.textContent = (currentState === 0 ? "On" : "Off");
    localStorage.setItem('starToggleState', starToggle.dataset.state); // L∆∞u tr·∫°ng th√°i
    filterWords(); // L·ªçc l·∫°i t·ª´
    currentIndex = 0; // Reset v·ªÅ t·ª´ ƒë·∫ßu ti√™n c·ªßa danh s√°ch ƒë√£ l·ªçc
    updateCard(currentIndex);
    resetEditMode(); // Reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a khi l·ªçc
    showToast(`Ch·∫ø ƒë·ªô "T·ª´ ƒë√£ g·∫Øn sao" ƒë√£ ${starToggle.dataset.state === "1" ? 'B·∫¨T' : 'T·∫ÆT'}.`, 'info');
});

// Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i "√în t·∫≠p" (learn-toggle) - ƒê·∫£m b·∫£o ch·ªâ 1 ch·∫ø ƒë·ªô l·ªçc ho·∫°t ƒë·ªông
learnToggle.addEventListener('click', () => {
    // T·∫Øt c√°c toggle l·ªçc kh√°c ƒë·ªÉ tr√°nh xung ƒë·ªôt
    starToggle.dataset.state = "0";
    starToggleStatus.textContent = "Off";

    const currentState = parseInt(learnToggle.dataset.state);
    learnToggle.dataset.state = (currentState === 0 ? "1" : "0").toString();
    learnToggleStatus.textContent = (currentState === 0 ? "On" : "Off");
    localStorage.setItem('learnToggleState', learnToggle.dataset.state); // L∆∞u tr·∫°ng th√°i
    filterWords(); // L·ªçc l·∫°i t·ª´
    currentIndex = 0; // Reset v·ªÅ t·ª´ ƒë·∫ßu ti√™n c·ªßa danh s√°ch ƒë√£ l·ªçc
    updateCard(currentIndex);
    resetEditMode(); // Reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a khi l·ªçc
    showToast(`Ch·∫ø ƒë·ªô "√în t·∫≠p" ƒë√£ ${learnToggle.dataset.state === "1" ? 'B·∫¨T' : 'T·∫ÆT'}.`, 'info');
});


// Toggle Ch·ªß ƒë·ªÅ s√°ng/t·ªëi
themeToggle.addEventListener('click', () => {
    const currentState = parseInt(themeToggle.dataset.state);
    themeToggle.dataset.state = (currentState === 0 ? "1" : "0").toString();
    document.body.dataset.theme = (themeToggle.dataset.state === "1" ? "dark" : "light");
    themeToggleStatus.textContent = (themeToggle.dataset.state === "1" ? "Dark" : "Light");
    localStorage.setItem('themeState', themeToggle.dataset.state); // L∆∞u tr·∫°ng th√°i
});

// X·ª≠ l√Ω t·∫£i l√™n file DOCX
uploadBtn.addEventListener('click', () => {
    const file = uploadFile.files[0];
    if (!file) {
        showToast('Vui l√≤ng ch·ªçn m·ªôt file .docx!', 'error');
        return;
    }

    showToast('ƒêang x·ª≠ l√Ω file...', 'info', 5000); // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω

    const reader = new FileReader();
    reader.onload = function(event) {
        const arrayBuffer = event.target.result;
        mammoth.extractRawText({ arrayBuffer: arrayBuffer })
            .then(function(result) {
                const text = result.value;
                const messages = result.messages; // L·∫•y c√°c th√¥ng b√°o/c·∫£nh b√°o t·ª´ mammoth

                if (messages.length > 0) {
                    console.warn("Mammoth messages:", messages); // In ra console ƒë·ªÉ debug
                    // showToast("C√≥ c·∫£nh b√°o khi ƒë·ªçc file. Ki·ªÉm tra console.", "warning");
                }

                const lines = text.split(/\r?\n/).map(line => line.trim()).filter(line => line.length > 0);
                const newWordsFromFile = [];
                let currentWordObject = null;

                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];
                    if (!currentWordObject) {
                        currentWordObject = { word: line, definition: "", starred: false };
                    } else {
                        currentWordObject.definition = line;
                        newWordsFromFile.push(currentWordObject);
                        currentWordObject = null;
                        // B·ªè qua d√≤ng tr·ªëng ti·∫øp theo (n·∫øu c√≥)
                        if (i + 1 < lines.length && !lines[i + 1].trim()) {
                            i++;
                        }
                    }
                }

                let addedCount = 0;
                let duplicateCount = 0;
                let skippedCount = 0;

                // X·ª≠ l√Ω t·ª´ m·ªõi t·ª´ file, ki·ªÉm tra tr√πng l·∫∑p v√† th√™m v√†o danh s√°ch ch√≠nh
                newWordsFromFile.forEach(newWord => {
                    if (newWord.word && newWord.definition) {
                        const isDuplicate = words.some(w => 
                            w.word.toLowerCase() === newWord.word.toLowerCase() && 
                            w.definition.toLowerCase() === newWord.definition.toLowerCase()
                        );
                        
                        if (isDuplicate) {
                            duplicateCount++;
                        } else {
                            words.push(newWord);
                            addedCount++;
                        }
                    } else {
                        skippedCount++; // B·ªè qua t·ª´ thi·∫øu th√¥ng tin
                    }
                });


                if (addedCount > 0 || duplicateCount > 0 || skippedCount > 0) {
                    localStorage.setItem('words', JSON.stringify(words));
                    filterWords(); // √Åp d·ª•ng l·∫°i b·ªô l·ªçc n·∫øu c√≥
                    currentIndex = 0; // Reset v·ªÅ t·ª´ ƒë·∫ßu ti√™n
                    updateCard(currentIndex);
                    resetEditMode(); // Reset ch·∫ø ƒë·ªô ch·ªânh s·ª≠a

                    let msg = `Ho√†n th√†nh t·∫£i file: ƒê√£ th√™m ${addedCount} t·ª´.`;
                    if (duplicateCount > 0) {
                        msg += ` ${duplicateCount} t·ª´ ƒë√£ t·ªìn t·∫°i (ƒë√£ b·ªè qua).`;
                    }
                    if (skippedCount > 0) {
                        msg += ` ${skippedCount} t·ª´ b·ªã b·ªè qua (thi·∫øu th√¥ng tin).`;
                    }
                    showToast(msg, 'success', 6000);
                } else {
                    showToast('Kh√¥ng c√≥ t·ª´ m·ªõi n√†o ƒë∆∞·ª£c t√¨m th·∫•y ho·∫∑c t·∫•t c·∫£ ƒë·ªÅu l·ªói.', 'error', 5000);
                }
                uploadFile.value = ''; // X√≥a t√™n file tr√™n input
            })
            .done();
    };
    reader.readAsArrayBuffer(file);
});


// --- Kh·ªüi t·∫°o ·ª©ng d·ª•ng ---
// H√†m kh·ªüi t·∫°o ch√≠nh
function initializeApp() {
    // Kh·ªüi t·∫°o tr·∫°ng th√°i toggle t·ª´ localStorage khi t·∫£i trang
    const savedLearnToggleState = localStorage.getItem('learnToggleState') || "0";
    learnToggle.dataset.state = savedLearnToggleState;
    learnToggleStatus.textContent = (savedLearnToggleState === "1" ? "On" : "Off");

    const savedStarToggleState = localStorage.getItem('starToggleState') || "0";
    starToggle.dataset.state = savedStarToggleState;
    starToggleStatus.textContent = (savedStarToggleState === "1" ? "On" : "Off");

    const savedThemeState = localStorage.getItem('themeState') || "0"; // M·∫∑c ƒë·ªãnh l√† light
    themeToggle.dataset.state = savedThemeState;
    document.body.dataset.theme = (savedThemeState === "1" ? "dark" : "light");
    themeToggleStatus.textContent = (savedThemeState === "1" ? "Dark" : "Light");

    // √Åp d·ª•ng b·ªô l·ªçc ban ƒë·∫ßu v√† hi·ªÉn th·ªã th·∫ª
    filterWords();
    updateCard(currentIndex);
}

// G·ªçi h√†m kh·ªüi t·∫°o khi DOM ƒë√£ s·∫µn s√†ng
document.addEventListener('DOMContentLoaded', initializeApp);